import { ReTree } from './retree';
import * as ɵngcc0 from '@angular/core';
export interface DeviceInfo {
    userAgent: string;
    os: string;
    browser: string;
    device: string;
    os_version: string;
    browser_version: string;
}
export declare class DeviceDetectorService {
    private platformId;
    ua: string;
    userAgent: string;
    os: string;
    browser: string;
    device: string;
    os_version: string;
    browser_version: string;
    reTree: ReTree;
    constructor(platformId: any);
    /**
     * @author Ahsan Ayaz
     * @desc Sets the initial value of the device when the service is initiated.
     * This value is later accessible for usage
     */
    setDeviceInfo(ua?: string): void;
    /**
     * @author Ahsan Ayaz
     * @desc Returns the device information
     * @returns the device information object.
     */
    getDeviceInfo(): DeviceInfo;
    /**
     * @author Ahsan Ayaz
     * @desc Compares the current device info with the mobile devices to check
     * if the current device is a mobile and also check current device is tablet so it will return false.
     * @returns whether the current device is a mobile
     */
    isMobile(userAgent?: string): boolean;
    /**
     * @author Ahsan Ayaz
     * @desc Compares the current device info with the tablet devices to check
     * if the current device is a tablet.
     * @returns whether the current device is a tablet
     */
    isTablet(userAgent?: string): boolean;
    /**
     * @author Ahsan Ayaz
     * @desc Compares the current device info with the desktop devices to check
     * if the current device is a desktop device.
     * @returns whether the current device is a desktop device
     */
    isDesktop(userAgent?: string): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DeviceDetectorService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DeviceDetectorService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWRldGVjdG9yLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZGV2aWNlLWRldGVjdG9yLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZVRyZWUgfSBmcm9tICcuL3JldHJlZSc7XG5leHBvcnQgaW50ZXJmYWNlIERldmljZUluZm8ge1xuICAgIHVzZXJBZ2VudDogc3RyaW5nO1xuICAgIG9zOiBzdHJpbmc7XG4gICAgYnJvd3Nlcjogc3RyaW5nO1xuICAgIGRldmljZTogc3RyaW5nO1xuICAgIG9zX3ZlcnNpb246IHN0cmluZztcbiAgICBicm93c2VyX3ZlcnNpb246IHN0cmluZztcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERldmljZURldGVjdG9yU2VydmljZSB7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIHVhOiBzdHJpbmc7XG4gICAgdXNlckFnZW50OiBzdHJpbmc7XG4gICAgb3M6IHN0cmluZztcbiAgICBicm93c2VyOiBzdHJpbmc7XG4gICAgZGV2aWNlOiBzdHJpbmc7XG4gICAgb3NfdmVyc2lvbjogc3RyaW5nO1xuICAgIGJyb3dzZXJfdmVyc2lvbjogc3RyaW5nO1xuICAgIHJlVHJlZTogUmVUcmVlO1xuICAgIGNvbnN0cnVjdG9yKHBsYXRmb3JtSWQ6IGFueSk7XG4gICAgLyoqXG4gICAgICogQGF1dGhvciBBaHNhbiBBeWF6XG4gICAgICogQGRlc2MgU2V0cyB0aGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUgZGV2aWNlIHdoZW4gdGhlIHNlcnZpY2UgaXMgaW5pdGlhdGVkLlxuICAgICAqIFRoaXMgdmFsdWUgaXMgbGF0ZXIgYWNjZXNzaWJsZSBmb3IgdXNhZ2VcbiAgICAgKi9cbiAgICBzZXREZXZpY2VJbmZvKHVhPzogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAYXV0aG9yIEFoc2FuIEF5YXpcbiAgICAgKiBAZGVzYyBSZXR1cm5zIHRoZSBkZXZpY2UgaW5mb3JtYXRpb25cbiAgICAgKiBAcmV0dXJucyB0aGUgZGV2aWNlIGluZm9ybWF0aW9uIG9iamVjdC5cbiAgICAgKi9cbiAgICBnZXREZXZpY2VJbmZvKCk6IERldmljZUluZm87XG4gICAgLyoqXG4gICAgICogQGF1dGhvciBBaHNhbiBBeWF6XG4gICAgICogQGRlc2MgQ29tcGFyZXMgdGhlIGN1cnJlbnQgZGV2aWNlIGluZm8gd2l0aCB0aGUgbW9iaWxlIGRldmljZXMgdG8gY2hlY2tcbiAgICAgKiBpZiB0aGUgY3VycmVudCBkZXZpY2UgaXMgYSBtb2JpbGUgYW5kIGFsc28gY2hlY2sgY3VycmVudCBkZXZpY2UgaXMgdGFibGV0IHNvIGl0IHdpbGwgcmV0dXJuIGZhbHNlLlxuICAgICAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgZGV2aWNlIGlzIGEgbW9iaWxlXG4gICAgICovXG4gICAgaXNNb2JpbGUodXNlckFnZW50Pzogc3RyaW5nKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAYXV0aG9yIEFoc2FuIEF5YXpcbiAgICAgKiBAZGVzYyBDb21wYXJlcyB0aGUgY3VycmVudCBkZXZpY2UgaW5mbyB3aXRoIHRoZSB0YWJsZXQgZGV2aWNlcyB0byBjaGVja1xuICAgICAqIGlmIHRoZSBjdXJyZW50IGRldmljZSBpcyBhIHRhYmxldC5cbiAgICAgKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IGRldmljZSBpcyBhIHRhYmxldFxuICAgICAqL1xuICAgIGlzVGFibGV0KHVzZXJBZ2VudD86IHN0cmluZyk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGF1dGhvciBBaHNhbiBBeWF6XG4gICAgICogQGRlc2MgQ29tcGFyZXMgdGhlIGN1cnJlbnQgZGV2aWNlIGluZm8gd2l0aCB0aGUgZGVza3RvcCBkZXZpY2VzIHRvIGNoZWNrXG4gICAgICogaWYgdGhlIGN1cnJlbnQgZGV2aWNlIGlzIGEgZGVza3RvcCBkZXZpY2UuXG4gICAgICogQHJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBkZXZpY2UgaXMgYSBkZXNrdG9wIGRldmljZVxuICAgICAqL1xuICAgIGlzRGVza3RvcCh1c2VyQWdlbnQ/OiBzdHJpbmcpOiBib29sZWFuO1xufVxuIl19