import { ChangeDetectorRef, NgZone, OnDestroy } from "@angular/core";
import { AnimationEvent } from "@angular/animations";
import { DomSanitizer } from "@angular/platform-browser";
import { Observable } from "rxjs";
import { Toastr } from "./toastr";
import { ToastrOptions } from "./toastr.options";
import * as ɵngcc0 from '@angular/core';
export declare class ToastrComponent implements OnDestroy {
    sanitizer: DomSanitizer;
    private cdr;
    private _zone;
    messageClass: string;
    titleClass: string;
    position: string;
    maxShown: number;
    newestOnTop: boolean;
    animate: string;
    toastrs: Toastr[];
    private _fresh;
    onToastClicked: (toast: Toastr) => void;
    private _onEnter;
    private _onExit;
    constructor(sanitizer: DomSanitizer, cdr: ChangeDetectorRef, _zone: NgZone, options: ToastrOptions);
    onEnter(): Observable<void>;
    onExit(): Observable<void>;
    addToastr(toast: Toastr): void;
    removeToastr(toast: Toastr): void;
    removeAllToasts(): void;
    clicked(toast: Toastr): void;
    anyToast(): boolean;
    findToast(toastId: number): Toastr | void;
    onAnimationEnd(event: AnimationEvent): void;
    private _ngExit();
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToastrComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ToastrComponent, "app-toastr", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3RyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0b2FzdHIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgTmdab25lLCBPbkRlc3Ryb3kgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBBbmltYXRpb25FdmVudCB9IGZyb20gXCJAYW5ndWxhci9hbmltYXRpb25zXCI7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gXCJAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBUb2FzdHIgfSBmcm9tIFwiLi90b2FzdHJcIjtcclxuaW1wb3J0IHsgVG9hc3RyT3B0aW9ucyB9IGZyb20gXCIuL3RvYXN0ci5vcHRpb25zXCI7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRvYXN0ckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgICBzYW5pdGl6ZXI6IERvbVNhbml0aXplcjtcclxuICAgIHByaXZhdGUgY2RyO1xyXG4gICAgcHJpdmF0ZSBfem9uZTtcclxuICAgIG1lc3NhZ2VDbGFzczogc3RyaW5nO1xyXG4gICAgdGl0bGVDbGFzczogc3RyaW5nO1xyXG4gICAgcG9zaXRpb246IHN0cmluZztcclxuICAgIG1heFNob3duOiBudW1iZXI7XHJcbiAgICBuZXdlc3RPblRvcDogYm9vbGVhbjtcclxuICAgIGFuaW1hdGU6IHN0cmluZztcclxuICAgIHRvYXN0cnM6IFRvYXN0cltdO1xyXG4gICAgcHJpdmF0ZSBfZnJlc2g7XHJcbiAgICBvblRvYXN0Q2xpY2tlZDogKHRvYXN0OiBUb2FzdHIpID0+IHZvaWQ7XHJcbiAgICBwcml2YXRlIF9vbkVudGVyO1xyXG4gICAgcHJpdmF0ZSBfb25FeGl0O1xyXG4gICAgY29uc3RydWN0b3Ioc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIF96b25lOiBOZ1pvbmUsIG9wdGlvbnM6IFRvYXN0ck9wdGlvbnMpO1xyXG4gICAgb25FbnRlcigpOiBPYnNlcnZhYmxlPHZvaWQ+O1xyXG4gICAgb25FeGl0KCk6IE9ic2VydmFibGU8dm9pZD47XHJcbiAgICBhZGRUb2FzdHIodG9hc3Q6IFRvYXN0cik6IHZvaWQ7XHJcbiAgICByZW1vdmVUb2FzdHIodG9hc3Q6IFRvYXN0cik6IHZvaWQ7XHJcbiAgICByZW1vdmVBbGxUb2FzdHMoKTogdm9pZDtcclxuICAgIGNsaWNrZWQodG9hc3Q6IFRvYXN0cik6IHZvaWQ7XHJcbiAgICBhbnlUb2FzdCgpOiBib29sZWFuO1xyXG4gICAgZmluZFRvYXN0KHRvYXN0SWQ6IG51bWJlcik6IFRvYXN0ciB8IHZvaWQ7XHJcbiAgICBvbkFuaW1hdGlvbkVuZChldmVudDogQW5pbWF0aW9uRXZlbnQpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBfbmdFeGl0KCk7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==