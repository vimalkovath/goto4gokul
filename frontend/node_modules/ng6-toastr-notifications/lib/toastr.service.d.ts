import { ApplicationRef, ComponentFactoryResolver, Injector, NgZone } from "@angular/core";
import { Observable } from "rxjs";
import { ToastrOptions } from "./toastr.options";
import { Toastr } from "./toastr";
import * as ɵngcc0 from '@angular/core';
export interface IImplicitContext<T> {
    $implicit?: T;
}
export declare class ToastrManager {
    private _applicationRef;
    private _componentFactoryResolver;
    private _injector;
    private ngZone;
    private options;
    toastrContainers: Array<any>;
    private index;
    private toastClicked;
    constructor(_applicationRef: ApplicationRef, _componentFactoryResolver: ComponentFactoryResolver, _injector: Injector, ngZone: NgZone, options: ToastrOptions);
    private createToastrComponent<T>(type, providers?);
    private attachToApplication<T>(componentRef);
    private detachFromApplication<T>(componentRef);
    private isToastrContainerExist(position);
    private getToastrComponentRef(position);
    createTimeout(toast: Toastr): any;
    setupToast(toast: Toastr, options?: any): Toastr;
    private clearToast(toast);
    private clearAllToasts();
    private dispose(toastrComponentRef);
    private _onToastClicked(toast);
    dismissToastr(toast: Toastr): void;
    dismissAllToastr(): void;
    onClickToast(): Observable<Toastr>;
    showToastr(toastr: Toastr, options?: Object): Promise<Toastr>;
    errorToastr(message: string, title?: string, options?: any): Toastr;
    infoToastr(message: string, title?: string, options?: any): Toastr;
    successToastr(message: string, title?: string, options?: any): Toastr;
    warningToastr(message: string, title?: string, options?: any): Toastr;
    customToastr(message: string, title?: string, options?: any): Toastr;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToastrManager, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ToastrManager>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3RyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsidG9hc3RyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwbGljYXRpb25SZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSW5qZWN0b3IsIE5nWm9uZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBUb2FzdHJPcHRpb25zIH0gZnJvbSBcIi4vdG9hc3RyLm9wdGlvbnNcIjtcclxuaW1wb3J0IHsgVG9hc3RyIH0gZnJvbSBcIi4vdG9hc3RyXCI7XHJcbmV4cG9ydCBpbnRlcmZhY2UgSUltcGxpY2l0Q29udGV4dDxUPiB7XHJcbiAgICAkaW1wbGljaXQ/OiBUO1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRvYXN0ck1hbmFnZXIge1xyXG4gICAgcHJpdmF0ZSBfYXBwbGljYXRpb25SZWY7XHJcbiAgICBwcml2YXRlIF9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI7XHJcbiAgICBwcml2YXRlIF9pbmplY3RvcjtcclxuICAgIHByaXZhdGUgbmdab25lO1xyXG4gICAgcHJpdmF0ZSBvcHRpb25zO1xyXG4gICAgdG9hc3RyQ29udGFpbmVyczogQXJyYXk8YW55PjtcclxuICAgIHByaXZhdGUgaW5kZXg7XHJcbiAgICBwcml2YXRlIHRvYXN0Q2xpY2tlZDtcclxuICAgIGNvbnN0cnVjdG9yKF9hcHBsaWNhdGlvblJlZjogQXBwbGljYXRpb25SZWYsIF9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgX2luamVjdG9yOiBJbmplY3Rvciwgbmdab25lOiBOZ1pvbmUsIG9wdGlvbnM6IFRvYXN0ck9wdGlvbnMpO1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVUb2FzdHJDb21wb25lbnQ8VD4odHlwZSwgcHJvdmlkZXJzPyk7XHJcbiAgICBwcml2YXRlIGF0dGFjaFRvQXBwbGljYXRpb248VD4oY29tcG9uZW50UmVmKTtcclxuICAgIHByaXZhdGUgZGV0YWNoRnJvbUFwcGxpY2F0aW9uPFQ+KGNvbXBvbmVudFJlZik7XHJcbiAgICBwcml2YXRlIGlzVG9hc3RyQ29udGFpbmVyRXhpc3QocG9zaXRpb24pO1xyXG4gICAgcHJpdmF0ZSBnZXRUb2FzdHJDb21wb25lbnRSZWYocG9zaXRpb24pO1xyXG4gICAgY3JlYXRlVGltZW91dCh0b2FzdDogVG9hc3RyKTogYW55O1xyXG4gICAgc2V0dXBUb2FzdCh0b2FzdDogVG9hc3RyLCBvcHRpb25zPzogYW55KTogVG9hc3RyO1xyXG4gICAgcHJpdmF0ZSBjbGVhclRvYXN0KHRvYXN0KTtcclxuICAgIHByaXZhdGUgY2xlYXJBbGxUb2FzdHMoKTtcclxuICAgIHByaXZhdGUgZGlzcG9zZSh0b2FzdHJDb21wb25lbnRSZWYpO1xyXG4gICAgcHJpdmF0ZSBfb25Ub2FzdENsaWNrZWQodG9hc3QpO1xyXG4gICAgZGlzbWlzc1RvYXN0cih0b2FzdDogVG9hc3RyKTogdm9pZDtcclxuICAgIGRpc21pc3NBbGxUb2FzdHIoKTogdm9pZDtcclxuICAgIG9uQ2xpY2tUb2FzdCgpOiBPYnNlcnZhYmxlPFRvYXN0cj47XHJcbiAgICBzaG93VG9hc3RyKHRvYXN0cjogVG9hc3RyLCBvcHRpb25zPzogT2JqZWN0KTogUHJvbWlzZTxUb2FzdHI+O1xyXG4gICAgZXJyb3JUb2FzdHIobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZywgb3B0aW9ucz86IGFueSk6IFRvYXN0cjtcclxuICAgIGluZm9Ub2FzdHIobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZywgb3B0aW9ucz86IGFueSk6IFRvYXN0cjtcclxuICAgIHN1Y2Nlc3NUb2FzdHIobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZywgb3B0aW9ucz86IGFueSk6IFRvYXN0cjtcclxuICAgIHdhcm5pbmdUb2FzdHIobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZywgb3B0aW9ucz86IGFueSk6IFRvYXN0cjtcclxuICAgIGN1c3RvbVRvYXN0cihtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBvcHRpb25zPzogYW55KTogVG9hc3RyO1xyXG59XHJcbiJdfQ==